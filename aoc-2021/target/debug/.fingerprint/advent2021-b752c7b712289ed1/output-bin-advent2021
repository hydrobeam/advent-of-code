{"message":"redundant else block","code":{"code":"clippy::redundant_else","explanation":null},"level":"warning","spans":[{"file_name":"src/day10.rs","byte_start":753,"byte_end":807,"line_start":20,"line_end":22,"column_start":24,"column_end":18,"is_primary":true,"text":[{"text":"                } else {","highlight_start":24,"highlight_end":25},{"text":"                    str_vec.pop();","highlight_start":1,"highlight_end":35},{"text":"                }","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-W clippy::redundant-else` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the `else` block and move the contents out","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: redundant else block\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day10.rs:20:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m                } else {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    str_vec.pop();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::redundant-else` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: remove the `else` block and move the contents out\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else\u001b[0m\n\n"}
{"message":"redundant else block","code":{"code":"clippy::redundant_else","explanation":null},"level":"warning","spans":[{"file_name":"src/day10.rs","byte_start":1730,"byte_end":1784,"line_start":52,"line_end":54,"column_start":24,"column_end":18,"is_primary":true,"text":[{"text":"                } else {","highlight_start":24,"highlight_end":25},{"text":"                    str_vec.pop();","highlight_start":1,"highlight_end":35},{"text":"                }","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the `else` block and move the contents out","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: redundant else block\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day10.rs:52:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m                } else {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    str_vec.pop();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: remove the `else` block and move the contents out\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else\u001b[0m\n\n"}
{"message":"unnecessary `!=` operation","code":{"code":"clippy::if_not_else","explanation":null},"level":"warning","spans":[{"file_name":"src/day10.rs","byte_start":606,"byte_end":807,"line_start":17,"line_end":22,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"                if str_vec[str_vec.len() - 1] != beginners[ind] {","highlight_start":17,"highlight_end":66},{"text":"                    total += vals[ind];","highlight_start":1,"highlight_end":40},{"text":"                    break 'outer;","highlight_start":1,"highlight_end":34},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    str_vec.pop();","highlight_start":1,"highlight_end":35},{"text":"                }","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-W clippy::if-not-else` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"change to `==` and swap the blocks of the `if`/`else`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary `!=` operation\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day10.rs:17:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                if str_vec[str_vec.len() - 1] != beginners[ind] {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    total += vals[ind];\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    break 'outer;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    str_vec.pop();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::if-not-else` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: change to `==` and swap the blocks of the `if`/`else`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else\u001b[0m\n\n"}
{"message":"unnecessary `!=` operation","code":{"code":"clippy::if_not_else","explanation":null},"level":"warning","spans":[{"file_name":"src/day10.rs","byte_start":1583,"byte_end":1784,"line_start":49,"line_end":54,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"                if str_vec[str_vec.len() - 1] != beginners[ind] {","highlight_start":17,"highlight_end":66},{"text":"                    incomplete = false;","highlight_start":1,"highlight_end":40},{"text":"                    break 'outer;","highlight_start":1,"highlight_end":34},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    str_vec.pop();","highlight_start":1,"highlight_end":35},{"text":"                }","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"change to `==` and swap the blocks of the `if`/`else`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary `!=` operation\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day10.rs:49:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                if str_vec[str_vec.len() - 1] != beginners[ind] {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    incomplete = false;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    break 'outer;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    str_vec.pop();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: change to `==` and swap the blocks of the `if`/`else`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else\u001b[0m\n\n"}
{"message":"item name ends with its containing module's name","code":{"code":"clippy::module_name_repetitions","explanation":null},"level":"warning","spans":[{"file_name":"src/day11.rs","byte_start":32,"byte_end":2657,"line_start":3,"line_end":92,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn solve_day11() {","highlight_start":1,"highlight_end":23},{"text":"    let input = include_str!(\"../inputs/day11input.txt\").lines();","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // create 2d-array;","highlight_start":1,"highlight_end":24},{"text":"    let mut contents = input","highlight_start":1,"highlight_end":29},{"text":"        .map(|x| {","highlight_start":1,"highlight_end":19},{"text":"            x.split_terminator(\"\")","highlight_start":1,"highlight_end":35},{"text":"                .skip(1)","highlight_start":1,"highlight_end":25},{"text":"                .map(|y| y.parse::<u32>().unwrap())","highlight_start":1,"highlight_end":52},{"text":"                .collect::<Vec<u32>>()","highlight_start":1,"highlight_end":39},{"text":"        })","highlight_start":1,"highlight_end":11},{"text":"        .collect::<Vec<Vec<u32>>>();","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let max_rows = contents.len() - 1;","highlight_start":1,"highlight_end":39},{"text":"    let max_cols = contents[0].len() - 1;","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let mut hashie: HashMap<(usize, usize), Octo> = HashMap::new();","highlight_start":1,"highlight_end":68},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // create hashmap of octopus indices -> octopus","highlight_start":1,"highlight_end":52},{"text":"    for row_index in 0..contents.len() {","highlight_start":1,"highlight_end":41},{"text":"        for col_index in 0..contents.len() {","highlight_start":1,"highlight_end":45},{"text":"            let curr_pos = (row_index, col_index);","highlight_start":1,"highlight_end":51},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let mut curr_octo: Octo = Octo {","highlight_start":1,"highlight_end":45},{"text":"                flashed: false,","highlight_start":1,"highlight_end":32},{"text":"                index: curr_pos,","highlight_start":1,"highlight_end":33},{"text":"                neighbours: Vec::new(),","highlight_start":1,"highlight_end":40},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            let neighbours = find_neighbours(row_index, col_index, max_rows, max_cols);","highlight_start":1,"highlight_end":88},{"text":"            for octopus in neighbours {","highlight_start":1,"highlight_end":40},{"text":"                curr_octo.neighbours.push(octopus);","highlight_start":1,"highlight_end":52},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            hashie.insert(curr_pos, curr_octo);","highlight_start":1,"highlight_end":48},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let mut flashes = 0;","highlight_start":1,"highlight_end":25},{"text":"    let mut days = 0;","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    loop {","highlight_start":1,"highlight_end":11},{"text":"        loop {","highlight_start":1,"highlight_end":15},{"text":"            let nines = hashie","highlight_start":1,"highlight_end":31},{"text":"                .values_mut()","highlight_start":1,"highlight_end":30},{"text":"                .filter(|x| contents[x.index.0][x.index.1] > 9 && !x.flashed)","highlight_start":1,"highlight_end":78},{"text":"                .collect::<Vec<&mut Octo>>();","highlight_start":1,"highlight_end":46},{"text":"            let len = nines.len();","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            if len != 0 {","highlight_start":1,"highlight_end":26},{"text":"                for octo in nines {","highlight_start":1,"highlight_end":36},{"text":"                    octo.flashed = true;","highlight_start":1,"highlight_end":41},{"text":"                    flashes += 1;","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    for index in &octo.neighbours {","highlight_start":1,"highlight_end":52},{"text":"                        contents[index.0][index.1] += 1;","highlight_start":1,"highlight_end":57},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                // no more nines and no more potential for butterfly effects","highlight_start":1,"highlight_end":77},{"text":"                break;","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        contents = contents","highlight_start":1,"highlight_end":28},{"text":"            .iter()","highlight_start":1,"highlight_end":20},{"text":"            .map(|x| {","highlight_start":1,"highlight_end":23},{"text":"                x.iter()","highlight_start":1,"highlight_end":25},{"text":"                    .map(|&y| if y > 9 { 0 } else { y })","highlight_start":1,"highlight_end":57},{"text":"                    .collect::<Vec<u32>>()","highlight_start":1,"highlight_end":43},{"text":"            })","highlight_start":1,"highlight_end":15},{"text":"            .collect::<Vec<Vec<u32>>>();","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // part 2 -> if all the numbers are 0, then we're done","highlight_start":1,"highlight_end":63},{"text":"        let sumo: usize = contents","highlight_start":1,"highlight_end":35},{"text":"            .iter()","highlight_start":1,"highlight_end":20},{"text":"            .map(|n| n.iter().filter(|&&x| x != 0).count())","highlight_start":1,"highlight_end":60},{"text":"            .sum();","highlight_start":1,"highlight_end":20},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if sumo == 0 {","highlight_start":1,"highlight_end":23},{"text":"            break;","highlight_start":1,"highlight_end":19},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // make everyone unflashed, increment day, increment every energy level by 1.","highlight_start":1,"highlight_end":86},{"text":"        hashie = hashie.into_iter().map(|(x, y)| (x, y.unflash())).collect();","highlight_start":1,"highlight_end":78},{"text":"        days += 1;","highlight_start":1,"highlight_end":19},{"text":"        contents = next_day(contents);","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    dbg!(days);","highlight_start":1,"highlight_end":16},{"text":"    dbg!(flashes);","highlight_start":1,"highlight_end":19},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-W clippy::module-name-repetitions` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: item name ends with its containing module's name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day11.rs:3:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn solve_day11() {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let input = include_str!(\"../inputs/day11input.txt\").lines();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    // create 2d-array;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    dbg!(flashes);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::module-name-repetitions` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions\u001b[0m\n\n"}
{"message":"unnecessary `!=` operation","code":{"code":"clippy::if_not_else","explanation":null},"level":"warning","spans":[{"file_name":"src/day11.rs","byte_start":1468,"byte_end":1877,"line_start":52,"line_end":64,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"            if len != 0 {","highlight_start":13,"highlight_end":26},{"text":"                for octo in nines {","highlight_start":1,"highlight_end":36},{"text":"                    octo.flashed = true;","highlight_start":1,"highlight_end":41},{"text":"                    flashes += 1;","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    for index in &octo.neighbours {","highlight_start":1,"highlight_end":52},{"text":"                        contents[index.0][index.1] += 1;","highlight_start":1,"highlight_end":57},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                // no more nines and no more potential for butterfly effects","highlight_start":1,"highlight_end":77},{"text":"                break;","highlight_start":1,"highlight_end":23},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"change to `==` and swap the blocks of the `if`/`else`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary `!=` operation\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day11.rs:52:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m            if len != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                for octo in nines {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    octo.flashed = true;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    flashes += 1;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                break;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: change to `==` and swap the blocks of the `if`/`else`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else\u001b[0m\n\n"}
{"message":"item name ends with its containing module's name","code":{"code":"clippy::module_name_repetitions","explanation":null},"level":"warning","spans":[{"file_name":"src/day12.rs","byte_start":60,"byte_end":1282,"line_start":5,"line_end":49,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn solve_day12() {","highlight_start":1,"highlight_end":23},{"text":"    let input = include_str!(\"../inputs/day12input.txt\").lines();","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let mut hashie: HashMap<&str, Junction> = HashMap::new();","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    for line in input {","highlight_start":1,"highlight_end":24},{"text":"        let mut line = line.split('-');","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let before = line.next().unwrap();","highlight_start":1,"highlight_end":43},{"text":"        let after = line.next().unwrap();","highlight_start":1,"highlight_end":42},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let a = hashie.entry(before).or_insert(Junction {","highlight_start":1,"highlight_end":58},{"text":"            name: before,","highlight_start":1,"highlight_end":26},{"text":"            connections: Vec::new(),","highlight_start":1,"highlight_end":37},{"text":"            size: {","highlight_start":1,"highlight_end":20},{"text":"                if before == before.to_uppercase() {","highlight_start":1,"highlight_end":53},{"text":"                    Size::Big","highlight_start":1,"highlight_end":30},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Size::Small","highlight_start":1,"highlight_end":32},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            visits: 0,","highlight_start":1,"highlight_end":23},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        a.connections.push(after);","highlight_start":1,"highlight_end":35},{"text":"        let dos = hashie.entry(after).or_insert(Junction {","highlight_start":1,"highlight_end":59},{"text":"            name: after,","highlight_start":1,"highlight_end":25},{"text":"            connections: Vec::new(),","highlight_start":1,"highlight_end":37},{"text":"            size: {","highlight_start":1,"highlight_end":20},{"text":"                if after == after.to_uppercase() {","highlight_start":1,"highlight_end":51},{"text":"                    Size::Big","highlight_start":1,"highlight_end":30},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    Size::Small","highlight_start":1,"highlight_end":32},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            visits: 0,","highlight_start":1,"highlight_end":23},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        dos.connections.push(before);","highlight_start":1,"highlight_end":38},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let start = hashie.get_mut(\"start\").unwrap();","highlight_start":1,"highlight_end":50},{"text":"    start.visits += 1;","highlight_start":1,"highlight_end":23},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    hunt(start.clone(), hashie, true);","highlight_start":1,"highlight_end":39},{"text":"    unsafe { dbg!(TOTAL) };","highlight_start":1,"highlight_end":28},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: item name ends with its containing module's name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day12.rs:5:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn solve_day12() {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let input = include_str!(\"../inputs/day12input.txt\").lines();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut hashie: HashMap<&str, Junction> = HashMap::new();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    unsafe { dbg!(TOTAL) };\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions\u001b[0m\n\n"}
{"message":"this argument is passed by value, but not consumed in the function body","code":{"code":"clippy::needless_pass_by_value","explanation":null},"level":"warning","spans":[{"file_name":"src/day12.rs","byte_start":1298,"byte_end":1306,"line_start":51,"line_end":51,"column_start":15,"column_end":23,"is_primary":true,"text":[{"text":"fn hunt(node: Junction, hoshie: HashMap<&str, Junction>, second_junc_active: bool) {","highlight_start":15,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-W clippy::needless-pass-by-value` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider taking a reference instead","code":null,"level":"help","spans":[{"file_name":"src/day12.rs","byte_start":1298,"byte_end":1306,"line_start":51,"line_end":51,"column_start":15,"column_end":23,"is_primary":true,"text":[{"text":"fn hunt(node: Junction, hoshie: HashMap<&str, Junction>, second_junc_active: bool) {","highlight_start":15,"highlight_end":23}],"label":null,"suggested_replacement":"&Junction","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this argument is passed by value, but not consumed in the function body\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day12.rs:51:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mfn hunt(node: Junction, hoshie: HashMap<&str, Junction>, second_junc_active: bool) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider taking a reference instead: `&Junction`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::needless-pass-by-value` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value\u001b[0m\n\n"}
{"message":"this argument is passed by value, but not consumed in the function body","code":{"code":"clippy::needless_pass_by_value","explanation":null},"level":"warning","spans":[{"file_name":"src/day12.rs","byte_start":1316,"byte_end":1339,"line_start":51,"line_end":51,"column_start":33,"column_end":56,"is_primary":true,"text":[{"text":"fn hunt(node: Junction, hoshie: HashMap<&str, Junction>, second_junc_active: bool) {","highlight_start":33,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider taking a reference instead","code":null,"level":"help","spans":[{"file_name":"src/day12.rs","byte_start":1316,"byte_end":1339,"line_start":51,"line_end":51,"column_start":33,"column_end":56,"is_primary":true,"text":[{"text":"fn hunt(node: Junction, hoshie: HashMap<&str, Junction>, second_junc_active: bool) {","highlight_start":33,"highlight_end":56}],"label":null,"suggested_replacement":"&HashMap<&str, Junction>","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this argument is passed by value, but not consumed in the function body\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day12.rs:51:33\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mfn hunt(node: Junction, hoshie: HashMap<&str, Junction>, second_junc_active: bool) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider taking a reference instead: `&HashMap<&str, Junction>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value\u001b[0m\n\n"}
{"message":"item name ends with its containing module's name","code":{"code":"clippy::module_name_repetitions","explanation":null},"level":"warning","spans":[{"file_name":"src/day13.rs","byte_start":0,"byte_end":2538,"line_start":1,"line_end":84,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"pub fn solve_day13() {","highlight_start":1,"highlight_end":23},{"text":"    let input = include_str!(\"../inputs/day13input.txt\")","highlight_start":1,"highlight_end":57},{"text":"        .split_once(\"\\n\\n\")","highlight_start":1,"highlight_end":28},{"text":"        .unwrap();","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let indices = input.0.lines().map(|x| {","highlight_start":1,"highlight_end":44},{"text":"        x.split(',')","highlight_start":1,"highlight_end":21},{"text":"            .map(|y| y.parse::<usize>().unwrap())","highlight_start":1,"highlight_end":50},{"text":"            .collect::<Vec<usize>>()","highlight_start":1,"highlight_end":37},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let directions = input.1.lines().map(|x| {","highlight_start":1,"highlight_end":47},{"text":"        x.split(' ')","highlight_start":1,"highlight_end":21},{"text":"            .nth(2)","highlight_start":1,"highlight_end":20},{"text":"            .expect(x)","highlight_start":1,"highlight_end":23},{"text":"            .split('=')","highlight_start":1,"highlight_end":24},{"text":"            .collect::<Vec<&str>>()","highlight_start":1,"highlight_end":36},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let (max_x, max_y) = find_max(Box::new(indices.clone().flatten()));","highlight_start":1,"highlight_end":72},{"text":"    let mut dot_vec = init_dot_vec(Box::new(indices), max_x, max_y);","highlight_start":1,"highlight_end":69},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    for direction in directions {","highlight_start":1,"highlight_end":34},{"text":"        let axis = direction[0];","highlight_start":1,"highlight_end":33},{"text":"        let val = direction[1].parse::<usize>().unwrap();","highlight_start":1,"highlight_end":58},{"text":"        let y_len = dot_vec.len();","highlight_start":1,"highlight_end":35},{"text":"        let x_len = dot_vec[0].len();","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if axis == \"x\" {","highlight_start":1,"highlight_end":25},{"text":"            if val >= x_len / 2 {","highlight_start":1,"highlight_end":34},{"text":"                for item in &mut dot_vec {","highlight_start":1,"highlight_end":43},{"text":"                    for col in (val + 1)..x_len {","highlight_start":1,"highlight_end":50},{"text":"                        if item[col] == 1 {","highlight_start":1,"highlight_end":44},{"text":"                            item[(val as isize + (val as isize - col as isize)) as usize] = 1;","highlight_start":1,"highlight_end":95},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                for row in &mut dot_vec {","highlight_start":1,"highlight_end":42},{"text":"                    *row = row[0..val].to_vec();","highlight_start":1,"highlight_end":49},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                for item in &mut dot_vec {","highlight_start":1,"highlight_end":43},{"text":"                    for col in 0..val {","highlight_start":1,"highlight_end":40},{"text":"                        if item[col] == 1 {","highlight_start":1,"highlight_end":44},{"text":"                            item[(val as isize + (val as isize - col as isize)) as usize] = 1;","highlight_start":1,"highlight_end":95},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                for row in &mut dot_vec {","highlight_start":1,"highlight_end":42},{"text":"                    *row = row[(val + 1)..x_len].to_vec();","highlight_start":1,"highlight_end":59},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            for row in (val + 1)..dot_vec.len() {","highlight_start":1,"highlight_end":50},{"text":"                for col in 0..dot_vec[0].len() {","highlight_start":1,"highlight_end":49},{"text":"                    if dot_vec[row][col] == 1 {","highlight_start":1,"highlight_end":48},{"text":"                        dot_vec[(val as isize + (val as isize - row as isize)) as usize][col] = 1;","highlight_start":1,"highlight_end":99},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            if val >= y_len / 2 {","highlight_start":1,"highlight_end":34},{"text":"                dot_vec = dot_vec[0..val].to_vec();","highlight_start":1,"highlight_end":52},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                dot_vec = dot_vec[(val + 1)..y_len].to_vec();","highlight_start":1,"highlight_end":62},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let visible_dots: usize = dot_vec.iter().flatten().sum();","highlight_start":1,"highlight_end":66},{"text":"        dbg!(visible_dots);","highlight_start":1,"highlight_end":28},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    for row in dot_vec {","highlight_start":1,"highlight_end":25},{"text":"        println!();","highlight_start":1,"highlight_end":20},{"text":"        for col in row {","highlight_start":1,"highlight_end":25},{"text":"            if col == 0 {","highlight_start":1,"highlight_end":26},{"text":"                print!(\".\");","highlight_start":1,"highlight_end":29},{"text":"            } else {","highlight_start":1,"highlight_end":21},{"text":"                print!(\"#\");","highlight_start":1,"highlight_end":29},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: item name ends with its containing module's name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day13.rs:1:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn solve_day13() {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let input = include_str!(\"../inputs/day13input.txt\")\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .split_once(\"\\n\\n\")\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .unwrap();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m83\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m84\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions\u001b[0m\n\n"}
{"message":"casting `isize` to `usize` may lose the sign of the value","code":{"code":"clippy::cast_sign_loss","explanation":null},"level":"warning","spans":[{"file_name":"src/day13.rs","byte_start":1039,"byte_end":1094,"line_start":34,"line_end":34,"column_start":34,"column_end":89,"is_primary":true,"text":[{"text":"                            item[(val as isize + (val as isize - col as isize)) as usize] = 1;","highlight_start":34,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-W clippy::cast-sign-loss` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `isize` to `usize` may lose the sign of the value\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day13.rs:34:34\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0m                   item[(val as isize + (val as isize - col as isize)) as usize] = 1;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::cast-sign-loss` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss\u001b[0m\n\n"}
{"message":"casting `usize` to `isize` may wrap around the value","code":{"code":"clippy::cast_possible_wrap","explanation":null},"level":"warning","spans":[{"file_name":"src/day13.rs","byte_start":1040,"byte_end":1052,"line_start":34,"line_end":34,"column_start":35,"column_end":47,"is_primary":true,"text":[{"text":"                            item[(val as isize + (val as isize - col as isize)) as usize] = 1;","highlight_start":35,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-W clippy::cast-possible-wrap` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `usize` to `isize` may wrap around the value\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day13.rs:34:35\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0m                   item[(val as isize + (val as isize - col as isize)) as usize] = 1;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::cast-possible-wrap` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap\u001b[0m\n\n"}
{"message":"casting `usize` to `isize` may wrap around the value","code":{"code":"clippy::cast_possible_wrap","explanation":null},"level":"warning","spans":[{"file_name":"src/day13.rs","byte_start":1056,"byte_end":1068,"line_start":34,"line_end":34,"column_start":51,"column_end":63,"is_primary":true,"text":[{"text":"                            item[(val as isize + (val as isize - col as isize)) as usize] = 1;","highlight_start":51,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `usize` to `isize` may wrap around the value\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day13.rs:34:51\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0m                   item[(val as isize + (val as isize - col as isize)) as usize] = 1;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap\u001b[0m\n\n"}
{"message":"casting `usize` to `isize` may wrap around the value","code":{"code":"clippy::cast_possible_wrap","explanation":null},"level":"warning","spans":[{"file_name":"src/day13.rs","byte_start":1071,"byte_end":1083,"line_start":34,"line_end":34,"column_start":66,"column_end":78,"is_primary":true,"text":[{"text":"                            item[(val as isize + (val as isize - col as isize)) as usize] = 1;","highlight_start":66,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `usize` to `isize` may wrap around the value\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day13.rs:34:66\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0m                   item[(val as isize + (val as isize - col as isize)) as usize] = 1;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap\u001b[0m\n\n"}
{"message":"casting `isize` to `usize` may lose the sign of the value","code":{"code":"clippy::cast_sign_loss","explanation":null},"level":"warning","spans":[{"file_name":"src/day13.rs","byte_start":1457,"byte_end":1512,"line_start":45,"line_end":45,"column_start":34,"column_end":89,"is_primary":true,"text":[{"text":"                            item[(val as isize + (val as isize - col as isize)) as usize] = 1;","highlight_start":34,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `isize` to `usize` may lose the sign of the value\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day13.rs:45:34\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0m                   item[(val as isize + (val as isize - col as isize)) as usize] = 1;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss\u001b[0m\n\n"}
{"message":"casting `usize` to `isize` may wrap around the value","code":{"code":"clippy::cast_possible_wrap","explanation":null},"level":"warning","spans":[{"file_name":"src/day13.rs","byte_start":1458,"byte_end":1470,"line_start":45,"line_end":45,"column_start":35,"column_end":47,"is_primary":true,"text":[{"text":"                            item[(val as isize + (val as isize - col as isize)) as usize] = 1;","highlight_start":35,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `usize` to `isize` may wrap around the value\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day13.rs:45:35\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0m                   item[(val as isize + (val as isize - col as isize)) as usize] = 1;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap\u001b[0m\n\n"}
{"message":"casting `usize` to `isize` may wrap around the value","code":{"code":"clippy::cast_possible_wrap","explanation":null},"level":"warning","spans":[{"file_name":"src/day13.rs","byte_start":1474,"byte_end":1486,"line_start":45,"line_end":45,"column_start":51,"column_end":63,"is_primary":true,"text":[{"text":"                            item[(val as isize + (val as isize - col as isize)) as usize] = 1;","highlight_start":51,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `usize` to `isize` may wrap around the value\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day13.rs:45:51\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0m                   item[(val as isize + (val as isize - col as isize)) as usize] = 1;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap\u001b[0m\n\n"}
{"message":"casting `usize` to `isize` may wrap around the value","code":{"code":"clippy::cast_possible_wrap","explanation":null},"level":"warning","spans":[{"file_name":"src/day13.rs","byte_start":1489,"byte_end":1501,"line_start":45,"line_end":45,"column_start":66,"column_end":78,"is_primary":true,"text":[{"text":"                            item[(val as isize + (val as isize - col as isize)) as usize] = 1;","highlight_start":66,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `usize` to `isize` may wrap around the value\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day13.rs:45:66\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0m                   item[(val as isize + (val as isize - col as isize)) as usize] = 1;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap\u001b[0m\n\n"}
{"message":"casting `isize` to `usize` may lose the sign of the value","code":{"code":"clippy::cast_sign_loss","explanation":null},"level":"warning","spans":[{"file_name":"src/day13.rs","byte_start":1915,"byte_end":1970,"line_start":58,"line_end":58,"column_start":33,"column_end":88,"is_primary":true,"text":[{"text":"                        dot_vec[(val as isize + (val as isize - row as isize)) as usize][col] = 1;","highlight_start":33,"highlight_end":88}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `isize` to `usize` may lose the sign of the value\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day13.rs:58:33\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        dot_vec[(val as isize + (val as isize - row as isize)) as usize][col] = 1;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss\u001b[0m\n\n"}
{"message":"casting `usize` to `isize` may wrap around the value","code":{"code":"clippy::cast_possible_wrap","explanation":null},"level":"warning","spans":[{"file_name":"src/day13.rs","byte_start":1916,"byte_end":1928,"line_start":58,"line_end":58,"column_start":34,"column_end":46,"is_primary":true,"text":[{"text":"                        dot_vec[(val as isize + (val as isize - row as isize)) as usize][col] = 1;","highlight_start":34,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `usize` to `isize` may wrap around the value\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day13.rs:58:34\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        dot_vec[(val as isize + (val as isize - row as isize)) as usize][col] = 1;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap\u001b[0m\n\n"}
{"message":"casting `usize` to `isize` may wrap around the value","code":{"code":"clippy::cast_possible_wrap","explanation":null},"level":"warning","spans":[{"file_name":"src/day13.rs","byte_start":1932,"byte_end":1944,"line_start":58,"line_end":58,"column_start":50,"column_end":62,"is_primary":true,"text":[{"text":"                        dot_vec[(val as isize + (val as isize - row as isize)) as usize][col] = 1;","highlight_start":50,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `usize` to `isize` may wrap around the value\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day13.rs:58:50\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        dot_vec[(val as isize + (val as isize - row as isize)) as usize][col] = 1;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap\u001b[0m\n\n"}
{"message":"casting `usize` to `isize` may wrap around the value","code":{"code":"clippy::cast_possible_wrap","explanation":null},"level":"warning","spans":[{"file_name":"src/day13.rs","byte_start":1947,"byte_end":1959,"line_start":58,"line_end":58,"column_start":65,"column_end":77,"is_primary":true,"text":[{"text":"                        dot_vec[(val as isize + (val as isize - row as isize)) as usize][col] = 1;","highlight_start":65,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `usize` to `isize` may wrap around the value\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day13.rs:58:65\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        dot_vec[(val as isize + (val as isize - row as isize)) as usize][col] = 1;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap\u001b[0m\n\n"}
{"message":"usage of `FromIterator::from_iter`","code":{"code":"clippy::from_iter_instead_of_collect","explanation":null},"level":"warning","spans":[{"file_name":"src/day14.rs","byte_start":575,"byte_end":604,"line_start":21,"line_end":21,"column_start":40,"column_end":69,"is_primary":true,"text":[{"text":"    let hashie: BTreeMap<&str, &str> = BTreeMap::from_iter(contents);","highlight_start":40,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-W clippy::from-iter-instead-of-collect` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_iter_instead_of_collect","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use `.collect()` instead of `::from_iter()`","code":null,"level":"help","spans":[{"file_name":"src/day14.rs","byte_start":575,"byte_end":604,"line_start":21,"line_end":21,"column_start":40,"column_end":69,"is_primary":true,"text":[{"text":"    let hashie: BTreeMap<&str, &str> = BTreeMap::from_iter(contents);","highlight_start":40,"highlight_end":69}],"label":null,"suggested_replacement":"contents.collect::<BTreeMap<_, _>>()","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: usage of `FromIterator::from_iter`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day14.rs:21:40\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let hashie: BTreeMap<&str, &str> = BTreeMap::from_iter(contents);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `.collect()` instead of `::from_iter()`: `contents.collect::<BTreeMap<_, _>>()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::from-iter-instead-of-collect` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#from_iter_instead_of_collect\u001b[0m\n\n"}
{"message":"used `cloned` where `copied` could be used instead","code":{"code":"clippy::cloned_instead_of_copied","explanation":null},"level":"warning","spans":[{"file_name":"src/day14.rs","byte_start":1406,"byte_end":1412,"line_start":50,"line_end":50,"column_start":45,"column_end":51,"is_primary":true,"text":[{"text":"            match ledger.get(&window.iter().cloned().collect::<String>() as &str) {","highlight_start":45,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-W clippy::cloned-instead-of-copied` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cloned_instead_of_copied","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/day14.rs","byte_start":1406,"byte_end":1412,"line_start":50,"line_end":50,"column_start":45,"column_end":51,"is_primary":true,"text":[{"text":"            match ledger.get(&window.iter().cloned().collect::<String>() as &str) {","highlight_start":45,"highlight_end":51}],"label":null,"suggested_replacement":"copied","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: used `cloned` where `copied` could be used instead\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day14.rs:50:45\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            match ledger.get(&window.iter().cloned().collect::<String>() as &str) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try: `copied`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::cloned-instead-of-copied` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cloned_instead_of_copied\u001b[0m\n\n"}
{"message":"manual implementation of an assign operation","code":{"code":"clippy::assign_op_pattern","explanation":null},"level":"warning","spans":[{"file_name":"src/day3_2020.rs","byte_start":725,"byte_end":747,"line_start":23,"line_end":23,"column_start":13,"column_end":35,"is_primary":true,"text":[{"text":"            cols = cols % num_cols;","highlight_start":13,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::assign_op_pattern)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"replace it with","code":null,"level":"help","spans":[{"file_name":"src/day3_2020.rs","byte_start":725,"byte_end":747,"line_start":23,"line_end":23,"column_start":13,"column_end":35,"is_primary":true,"text":[{"text":"            cols = cols % num_cols;","highlight_start":13,"highlight_end":35}],"label":null,"suggested_replacement":"cols %= num_cols","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: manual implementation of an assign operation\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day3_2020.rs:23:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            cols = cols % num_cols;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: replace it with: `cols %= num_cols`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::assign_op_pattern)]` on by default\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern\u001b[0m\n\n"}
{"message":"called `map(..).flatten()` on an `Iterator`","code":{"code":"clippy::map_flatten","explanation":null},"level":"warning","spans":[{"file_name":"src/day4_2020.rs","byte_start":179,"byte_end":4965,"line_start":7,"line_end":101,"column_start":22,"column_end":27,"is_primary":true,"text":[{"text":"            x.lines() // split by newline","highlight_start":22,"highlight_end":42},{"text":"                .map(|y| {","highlight_start":1,"highlight_end":27},{"text":"                    y.split(' ') // separate by spaces (indicates each property)","highlight_start":1,"highlight_end":81},{"text":"                        .map(|l| {","highlight_start":1,"highlight_end":35},{"text":"                            l.split(\":\") // split left and right, left is field, right is val;","highlight_start":1,"highlight_end":95},{"text":"                                .collect::<Vec<&str>>()","highlight_start":1,"highlight_end":56},{"text":"                        })","highlight_start":1,"highlight_end":27},{"text":"                        .filter(|a| {","highlight_start":1,"highlight_end":38},{"text":"                            if a[0] == \"byr\" {","highlight_start":1,"highlight_end":47},{"text":"                                let val = a[1].parse::<i64>();","highlight_start":1,"highlight_end":63},{"text":"                                match val {","highlight_start":1,"highlight_end":44},{"text":"                                    Ok(val) => val >= 1920 && val <= 2002,","highlight_start":1,"highlight_end":75},{"text":"                                    Err(_) => false,","highlight_start":1,"highlight_end":53},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            } else if a[0] == \"iyr\" {","highlight_start":1,"highlight_end":54},{"text":"                                let val = a[1].parse::<i64>();","highlight_start":1,"highlight_end":63},{"text":"                                match val {","highlight_start":1,"highlight_end":44},{"text":"                                    Ok(val) => val >= 2010 && val <= 2020,","highlight_start":1,"highlight_end":75},{"text":"                                    Err(_) => false,","highlight_start":1,"highlight_end":53},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            } else if a[0] == \"eyr\" {","highlight_start":1,"highlight_end":54},{"text":"                                let val = a[1].parse::<i64>();","highlight_start":1,"highlight_end":63},{"text":"                                match val {","highlight_start":1,"highlight_end":44},{"text":"                                    Ok(val) => val >= 2020 && val <= 2030,","highlight_start":1,"highlight_end":75},{"text":"                                    Err(_) => false,","highlight_start":1,"highlight_end":53},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            } else if a[0] == \"hgt\" {","highlight_start":1,"highlight_end":54},{"text":"                                let val = a[1].split_once(\"i\");","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                match val {","highlight_start":1,"highlight_end":44},{"text":"                                    Some(val) => match (val.0).parse::<i64>() {","highlight_start":1,"highlight_end":80},{"text":"                                        Ok(value) => value >= 59 && value <= 79,","highlight_start":1,"highlight_end":81},{"text":"                                        Err(_) => false,","highlight_start":1,"highlight_end":57},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    None => match a[1].split_once(\"c\") {","highlight_start":1,"highlight_end":73},{"text":"                                        Some(value) => match (value.0).parse::<i64>() {","highlight_start":1,"highlight_end":88},{"text":"                                            Ok(value_3) => value_3 >= 150 && value_3 <= 193,","highlight_start":1,"highlight_end":93},{"text":"                                            Err(_) => false,","highlight_start":1,"highlight_end":61},{"text":"                                        },","highlight_start":1,"highlight_end":43},{"text":"                                        None => false,","highlight_start":1,"highlight_end":55},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            } else if a[0] == \"hcl\" {","highlight_start":1,"highlight_end":54},{"text":"                                let mut valid = true;","highlight_start":1,"highlight_end":54},{"text":"                                let mut text = a[1].chars();","highlight_start":1,"highlight_end":61},{"text":"                                if text.next().unwrap() == '#' {","highlight_start":1,"highlight_end":65},{"text":"                                    // let besto = text.collect::<Vec<char>>();","highlight_start":1,"highlight_end":80},{"text":"                                    for character in text {","highlight_start":1,"highlight_end":60},{"text":"                                        let hot = character.to_string().parse::<i64>();","highlight_start":1,"highlight_end":88},{"text":"                                        let chorley = match hot {","highlight_start":1,"highlight_end":66},{"text":"                                            Ok(val) => val >= 0 && val <= 9,","highlight_start":1,"highlight_end":77},{"text":"                                            Err(_) => character >= 'a' && character <= 'f',","highlight_start":1,"highlight_end":92},{"text":"                                        };","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                        if !chorley {","highlight_start":1,"highlight_end":54},{"text":"                                            valid = false;","highlight_start":1,"highlight_end":59},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                } else {","highlight_start":1,"highlight_end":41},{"text":"                                    valid = false;","highlight_start":1,"highlight_end":51},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                valid","highlight_start":1,"highlight_end":38},{"text":"                            } else if a[0] == \"ecl\" {","highlight_start":1,"highlight_end":54},{"text":"                                match a[1] {","highlight_start":1,"highlight_end":45},{"text":"                                    \"amb\" | \"blu\" | \"brn\" | \"gry\" | \"grn\" | \"hzl\" | \"oth\" => true,","highlight_start":1,"highlight_end":99},{"text":"                                    _ => false,","highlight_start":1,"highlight_end":48},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            } else if a[0] == \"pid\" {","highlight_start":1,"highlight_end":54},{"text":"                                let mut valid = true;","highlight_start":1,"highlight_end":54},{"text":"                                let vector = a[1].chars().collect::<Vec<char>>();","highlight_start":1,"highlight_end":82},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                if vector.len() == 9 {","highlight_start":1,"highlight_end":55},{"text":"                                    for character in vector {","highlight_start":1,"highlight_end":62},{"text":"                                        let chorley = match character.to_string().parse::<i64>() {","highlight_start":1,"highlight_end":99},{"text":"                                            Ok(_) => true,","highlight_start":1,"highlight_end":59},{"text":"                                            Err(_) => false,","highlight_start":1,"highlight_end":61},{"text":"                                        };","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                        if !chorley {","highlight_start":1,"highlight_end":54},{"text":"                                            valid = false;","highlight_start":1,"highlight_end":59},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                } else {","highlight_start":1,"highlight_end":41},{"text":"                                    valid = false;","highlight_start":1,"highlight_end":51},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                valid","highlight_start":1,"highlight_end":38},{"text":"                            } else {","highlight_start":1,"highlight_end":37},{"text":"                                false","highlight_start":1,"highlight_end":38},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        })","highlight_start":1,"highlight_end":27},{"text":"                        .collect::<Vec<Vec<&str>>>()","highlight_start":1,"highlight_end":53},{"text":"                })","highlight_start":1,"highlight_end":19},{"text":"                .flatten()","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-W clippy::map-flatten` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_flatten","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try using `flat_map` instead","code":null,"level":"help","spans":[{"file_name":"src/day4_2020.rs","byte_start":179,"byte_end":4965,"line_start":7,"line_end":101,"column_start":22,"column_end":27,"is_primary":true,"text":[{"text":"            x.lines() // split by newline","highlight_start":22,"highlight_end":42},{"text":"                .map(|y| {","highlight_start":1,"highlight_end":27},{"text":"                    y.split(' ') // separate by spaces (indicates each property)","highlight_start":1,"highlight_end":81},{"text":"                        .map(|l| {","highlight_start":1,"highlight_end":35},{"text":"                            l.split(\":\") // split left and right, left is field, right is val;","highlight_start":1,"highlight_end":95},{"text":"                                .collect::<Vec<&str>>()","highlight_start":1,"highlight_end":56},{"text":"                        })","highlight_start":1,"highlight_end":27},{"text":"                        .filter(|a| {","highlight_start":1,"highlight_end":38},{"text":"                            if a[0] == \"byr\" {","highlight_start":1,"highlight_end":47},{"text":"                                let val = a[1].parse::<i64>();","highlight_start":1,"highlight_end":63},{"text":"                                match val {","highlight_start":1,"highlight_end":44},{"text":"                                    Ok(val) => val >= 1920 && val <= 2002,","highlight_start":1,"highlight_end":75},{"text":"                                    Err(_) => false,","highlight_start":1,"highlight_end":53},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            } else if a[0] == \"iyr\" {","highlight_start":1,"highlight_end":54},{"text":"                                let val = a[1].parse::<i64>();","highlight_start":1,"highlight_end":63},{"text":"                                match val {","highlight_start":1,"highlight_end":44},{"text":"                                    Ok(val) => val >= 2010 && val <= 2020,","highlight_start":1,"highlight_end":75},{"text":"                                    Err(_) => false,","highlight_start":1,"highlight_end":53},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            } else if a[0] == \"eyr\" {","highlight_start":1,"highlight_end":54},{"text":"                                let val = a[1].parse::<i64>();","highlight_start":1,"highlight_end":63},{"text":"                                match val {","highlight_start":1,"highlight_end":44},{"text":"                                    Ok(val) => val >= 2020 && val <= 2030,","highlight_start":1,"highlight_end":75},{"text":"                                    Err(_) => false,","highlight_start":1,"highlight_end":53},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            } else if a[0] == \"hgt\" {","highlight_start":1,"highlight_end":54},{"text":"                                let val = a[1].split_once(\"i\");","highlight_start":1,"highlight_end":64},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                match val {","highlight_start":1,"highlight_end":44},{"text":"                                    Some(val) => match (val.0).parse::<i64>() {","highlight_start":1,"highlight_end":80},{"text":"                                        Ok(value) => value >= 59 && value <= 79,","highlight_start":1,"highlight_end":81},{"text":"                                        Err(_) => false,","highlight_start":1,"highlight_end":57},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                    None => match a[1].split_once(\"c\") {","highlight_start":1,"highlight_end":73},{"text":"                                        Some(value) => match (value.0).parse::<i64>() {","highlight_start":1,"highlight_end":88},{"text":"                                            Ok(value_3) => value_3 >= 150 && value_3 <= 193,","highlight_start":1,"highlight_end":93},{"text":"                                            Err(_) => false,","highlight_start":1,"highlight_end":61},{"text":"                                        },","highlight_start":1,"highlight_end":43},{"text":"                                        None => false,","highlight_start":1,"highlight_end":55},{"text":"                                    },","highlight_start":1,"highlight_end":39},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            } else if a[0] == \"hcl\" {","highlight_start":1,"highlight_end":54},{"text":"                                let mut valid = true;","highlight_start":1,"highlight_end":54},{"text":"                                let mut text = a[1].chars();","highlight_start":1,"highlight_end":61},{"text":"                                if text.next().unwrap() == '#' {","highlight_start":1,"highlight_end":65},{"text":"                                    // let besto = text.collect::<Vec<char>>();","highlight_start":1,"highlight_end":80},{"text":"                                    for character in text {","highlight_start":1,"highlight_end":60},{"text":"                                        let hot = character.to_string().parse::<i64>();","highlight_start":1,"highlight_end":88},{"text":"                                        let chorley = match hot {","highlight_start":1,"highlight_end":66},{"text":"                                            Ok(val) => val >= 0 && val <= 9,","highlight_start":1,"highlight_end":77},{"text":"                                            Err(_) => character >= 'a' && character <= 'f',","highlight_start":1,"highlight_end":92},{"text":"                                        };","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                        if !chorley {","highlight_start":1,"highlight_end":54},{"text":"                                            valid = false;","highlight_start":1,"highlight_end":59},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                } else {","highlight_start":1,"highlight_end":41},{"text":"                                    valid = false;","highlight_start":1,"highlight_end":51},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                valid","highlight_start":1,"highlight_end":38},{"text":"                            } else if a[0] == \"ecl\" {","highlight_start":1,"highlight_end":54},{"text":"                                match a[1] {","highlight_start":1,"highlight_end":45},{"text":"                                    \"amb\" | \"blu\" | \"brn\" | \"gry\" | \"grn\" | \"hzl\" | \"oth\" => true,","highlight_start":1,"highlight_end":99},{"text":"                                    _ => false,","highlight_start":1,"highlight_end":48},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            } else if a[0] == \"pid\" {","highlight_start":1,"highlight_end":54},{"text":"                                let mut valid = true;","highlight_start":1,"highlight_end":54},{"text":"                                let vector = a[1].chars().collect::<Vec<char>>();","highlight_start":1,"highlight_end":82},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                if vector.len() == 9 {","highlight_start":1,"highlight_end":55},{"text":"                                    for character in vector {","highlight_start":1,"highlight_end":62},{"text":"                                        let chorley = match character.to_string().parse::<i64>() {","highlight_start":1,"highlight_end":99},{"text":"                                            Ok(_) => true,","highlight_start":1,"highlight_end":59},{"text":"                                            Err(_) => false,","highlight_start":1,"highlight_end":61},{"text":"                                        };","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                        if !chorley {","highlight_start":1,"highlight_end":54},{"text":"                                            valid = false;","highlight_start":1,"highlight_end":59},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                } else {","highlight_start":1,"highlight_end":41},{"text":"                                    valid = false;","highlight_start":1,"highlight_end":51},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                                valid","highlight_start":1,"highlight_end":38},{"text":"                            } else {","highlight_start":1,"highlight_end":37},{"text":"                                false","highlight_start":1,"highlight_end":38},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        })","highlight_start":1,"highlight_end":27},{"text":"                        .collect::<Vec<Vec<&str>>>()","highlight_start":1,"highlight_end":53},{"text":"                })","highlight_start":1,"highlight_end":19},{"text":"                .flatten()","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":".flat_map(|y| {\n                    y.split(' ') // separate by spaces (indicates each property)\n                        .map(|l| {\n                            l.split(\":\") // split left and right, left is field, right is val;\n                                .collect::<Vec<&str>>()\n                        })\n                        .filter(|a| {\n                            if a[0] == \"byr\" {\n                                let val = a[1].parse::<i64>();\n                                match val {\n                                    Ok(val) => val >= 1920 && val <= 2002,\n                                    Err(_) => false,\n                                }\n                            } else if a[0] == \"iyr\" {\n                                let val = a[1].parse::<i64>();\n                                match val {\n                                    Ok(val) => val >= 2010 && val <= 2020,\n                                    Err(_) => false,\n                                }\n                            } else if a[0] == \"eyr\" {\n                                let val = a[1].parse::<i64>();\n                                match val {\n                                    Ok(val) => val >= 2020 && val <= 2030,\n                                    Err(_) => false,\n                                }\n                            } else if a[0] == \"hgt\" {\n                                let val = a[1].split_once(\"i\");\n\n                                match val {\n                                    Some(val) => match (val.0).parse::<i64>() {\n                                        Ok(value) => value >= 59 && value <= 79,\n                                        Err(_) => false,\n                                    },\n                                    None => match a[1].split_once(\"c\") {\n                                        Some(value) => match (value.0).parse::<i64>() {\n                                            Ok(value_3) => value_3 >= 150 && value_3 <= 193,\n                                            Err(_) => false,\n                                        },\n                                        None => false,\n                                    },\n                                }\n                            } else if a[0] == \"hcl\" {\n                                let mut valid = true;\n                                let mut text = a[1].chars();\n                                if text.next().unwrap() == '#' {\n                                    // let besto = text.collect::<Vec<char>>();\n                                    for character in text {\n                                        let hot = character.to_string().parse::<i64>();\n                                        let chorley = match hot {\n                                            Ok(val) => val >= 0 && val <= 9,\n                                            Err(_) => character >= 'a' && character <= 'f',\n                                        };\n\n                                        if !chorley {\n                                            valid = false;\n                                        }\n                                    }\n                                } else {\n                                    valid = false;\n                                }\n\n                                valid\n                            } else if a[0] == \"ecl\" {\n                                match a[1] {\n                                    \"amb\" | \"blu\" | \"brn\" | \"gry\" | \"grn\" | \"hzl\" | \"oth\" => true,\n                                    _ => false,\n                                }\n                            } else if a[0] == \"pid\" {\n                                let mut valid = true;\n                                let vector = a[1].chars().collect::<Vec<char>>();\n\n                                if vector.len() == 9 {\n                                    for character in vector {\n                                        let chorley = match character.to_string().parse::<i64>() {\n                                            Ok(_) => true,\n                                            Err(_) => false,\n                                        };\n\n                                        if !chorley {\n                                            valid = false;\n                                        }\n                                    }\n                                } else {\n                                    valid = false;\n                                }\n\n                                valid\n                            } else {\n                                false\n                            }\n                        })\n                        .collect::<Vec<Vec<&str>>>()\n                })","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: called `map(..).flatten()` on an `Iterator`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day4_2020.rs:7:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m            x.lines() // split by newline\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m______________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                .map(|y| {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    y.split(' ') // separate by spaces (indicates each property)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        .map(|l| {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                })\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                .flatten()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|__________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::map-flatten` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_flatten\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try using `flat_map` instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m            x.lines()\u001b[0m\u001b[0m\u001b[38;5;10m.flat_map(|y| {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+                     y.split(' ') // separate by spaces (indicates each property)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+                         .map(|l| {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                             l.split(\":\") // split left and right, left is field, right is val;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                 .collect::<Vec<&str>>()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         })\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\n"}
{"message":"single-character string constant used as pattern","code":{"code":"clippy::single_char_pattern","explanation":null},"level":"warning","spans":[{"file_name":"src/day4_2020.rs","byte_start":379,"byte_end":382,"line_start":11,"line_end":11,"column_start":37,"column_end":40,"is_primary":true,"text":[{"text":"                            l.split(\":\") // split left and right, left is field, right is val;","highlight_start":37,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::single_char_pattern)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_char_pattern","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try using a `char` instead","code":null,"level":"help","spans":[{"file_name":"src/day4_2020.rs","byte_start":379,"byte_end":382,"line_start":11,"line_end":11,"column_start":37,"column_end":40,"is_primary":true,"text":[{"text":"                            l.split(\":\") // split left and right, left is field, right is val;","highlight_start":37,"highlight_end":40}],"label":null,"suggested_replacement":"':'","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: single-character string constant used as pattern\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day4_2020.rs:11:37\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0m                   l.split(\":\") // split left and right, left is field, right is val;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try using a `char` instead: `':'`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::single_char_pattern)]` on by default\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_char_pattern\u001b[0m\n\n"}
{"message":"manual `RangeInclusive::contains` implementation","code":{"code":"clippy::manual_range_contains","explanation":null},"level":"warning","spans":[{"file_name":"src/day4_2020.rs","byte_start":760,"byte_end":786,"line_start":18,"line_end":18,"column_start":48,"column_end":74,"is_primary":true,"text":[{"text":"                                    Ok(val) => val >= 1920 && val <= 2002,","highlight_start":48,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::manual_range_contains)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use","code":null,"level":"help","spans":[{"file_name":"src/day4_2020.rs","byte_start":760,"byte_end":786,"line_start":18,"line_end":18,"column_start":48,"column_end":74,"is_primary":true,"text":[{"text":"                                    Ok(val) => val >= 1920 && val <= 2002,","highlight_start":48,"highlight_end":74}],"label":null,"suggested_replacement":"(1920..=2002).contains(&val)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: manual `RangeInclusive::contains` implementation\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day4_2020.rs:18:48\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0m                   Ok(val) => val >= 1920 && val <= 2002,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use: `(1920..=2002).contains(&val)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::manual_range_contains)]` on by default\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\u001b[0m\n\n"}
{"message":"manual `RangeInclusive::contains` implementation","code":{"code":"clippy::manual_range_contains","explanation":null},"level":"warning","spans":[{"file_name":"src/day4_2020.rs","byte_start":1083,"byte_end":1109,"line_start":24,"line_end":24,"column_start":48,"column_end":74,"is_primary":true,"text":[{"text":"                                    Ok(val) => val >= 2010 && val <= 2020,","highlight_start":48,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use","code":null,"level":"help","spans":[{"file_name":"src/day4_2020.rs","byte_start":1083,"byte_end":1109,"line_start":24,"line_end":24,"column_start":48,"column_end":74,"is_primary":true,"text":[{"text":"                                    Ok(val) => val >= 2010 && val <= 2020,","highlight_start":48,"highlight_end":74}],"label":null,"suggested_replacement":"(2010..=2020).contains(&val)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: manual `RangeInclusive::contains` implementation\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day4_2020.rs:24:48\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0m                   Ok(val) => val >= 2010 && val <= 2020,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use: `(2010..=2020).contains(&val)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\u001b[0m\n\n"}
{"message":"manual `RangeInclusive::contains` implementation","code":{"code":"clippy::manual_range_contains","explanation":null},"level":"warning","spans":[{"file_name":"src/day4_2020.rs","byte_start":1406,"byte_end":1432,"line_start":30,"line_end":30,"column_start":48,"column_end":74,"is_primary":true,"text":[{"text":"                                    Ok(val) => val >= 2020 && val <= 2030,","highlight_start":48,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use","code":null,"level":"help","spans":[{"file_name":"src/day4_2020.rs","byte_start":1406,"byte_end":1432,"line_start":30,"line_end":30,"column_start":48,"column_end":74,"is_primary":true,"text":[{"text":"                                    Ok(val) => val >= 2020 && val <= 2030,","highlight_start":48,"highlight_end":74}],"label":null,"suggested_replacement":"(2020..=2030).contains(&val)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: manual `RangeInclusive::contains` implementation\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day4_2020.rs:30:48\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0m                   Ok(val) => val >= 2020 && val <= 2030,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use: `(2020..=2030).contains(&val)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\u001b[0m\n\n"}
{"message":"manual `RangeInclusive::contains` implementation","code":{"code":"clippy::manual_range_contains","explanation":null},"level":"warning","spans":[{"file_name":"src/day4_2020.rs","byte_start":1817,"byte_end":1843,"line_start":38,"line_end":38,"column_start":54,"column_end":80,"is_primary":true,"text":[{"text":"                                        Ok(value) => value >= 59 && value <= 79,","highlight_start":54,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use","code":null,"level":"help","spans":[{"file_name":"src/day4_2020.rs","byte_start":1817,"byte_end":1843,"line_start":38,"line_end":38,"column_start":54,"column_end":80,"is_primary":true,"text":[{"text":"                                        Ok(value) => value >= 59 && value <= 79,","highlight_start":54,"highlight_end":80}],"label":null,"suggested_replacement":"(59..=79).contains(&value)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: manual `RangeInclusive::contains` implementation\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day4_2020.rs:38:54\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0m                   Ok(value) => value >= 59 && value <= 79,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use: `(59..=79).contains(&value)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\u001b[0m\n\n"}
{"message":"manual `RangeInclusive::contains` implementation","code":{"code":"clippy::manual_range_contains","explanation":null},"level":"warning","spans":[{"file_name":"src/day4_2020.rs","byte_start":2161,"byte_end":2193,"line_start":43,"line_end":43,"column_start":60,"column_end":92,"is_primary":true,"text":[{"text":"                                            Ok(value_3) => value_3 >= 150 && value_3 <= 193,","highlight_start":60,"highlight_end":92}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use","code":null,"level":"help","spans":[{"file_name":"src/day4_2020.rs","byte_start":2161,"byte_end":2193,"line_start":43,"line_end":43,"column_start":60,"column_end":92,"is_primary":true,"text":[{"text":"                                            Ok(value_3) => value_3 >= 150 && value_3 <= 193,","highlight_start":60,"highlight_end":92}],"label":null,"suggested_replacement":"(150..=193).contains(&value_3)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: manual `RangeInclusive::contains` implementation\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day4_2020.rs:43:60\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0m                   Ok(value_3) => value_3 >= 150 && value_3 <= 193,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use: `(150..=193).contains(&value_3)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\u001b[0m\n\n"}
{"message":"manual `RangeInclusive::contains` implementation","code":{"code":"clippy::manual_range_contains","explanation":null},"level":"warning","spans":[{"file_name":"src/day4_2020.rs","byte_start":3010,"byte_end":3030,"line_start":57,"line_end":57,"column_start":56,"column_end":76,"is_primary":true,"text":[{"text":"                                            Ok(val) => val >= 0 && val <= 9,","highlight_start":56,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use","code":null,"level":"help","spans":[{"file_name":"src/day4_2020.rs","byte_start":3010,"byte_end":3030,"line_start":57,"line_end":57,"column_start":56,"column_end":76,"is_primary":true,"text":[{"text":"                                            Ok(val) => val >= 0 && val <= 9,","highlight_start":56,"highlight_end":76}],"label":null,"suggested_replacement":"(0..=9).contains(&val)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: manual `RangeInclusive::contains` implementation\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day4_2020.rs:57:56\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0m                   Ok(val) => val >= 0 && val <= 9,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use: `(0..=9).contains(&val)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\u001b[0m\n\n"}
{"message":"manual `RangeInclusive::contains` implementation","code":{"code":"clippy::manual_range_contains","explanation":null},"level":"warning","spans":[{"file_name":"src/day4_2020.rs","byte_start":3086,"byte_end":3122,"line_start":58,"line_end":58,"column_start":55,"column_end":91,"is_primary":true,"text":[{"text":"                                            Err(_) => character >= 'a' && character <= 'f',","highlight_start":55,"highlight_end":91}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"use","code":null,"level":"help","spans":[{"file_name":"src/day4_2020.rs","byte_start":3086,"byte_end":3122,"line_start":58,"line_end":58,"column_start":55,"column_end":91,"is_primary":true,"text":[{"text":"                                            Err(_) => character >= 'a' && character <= 'f',","highlight_start":55,"highlight_end":91}],"label":null,"suggested_replacement":"('a'..='f').contains(&character)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: manual `RangeInclusive::contains` implementation\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day4_2020.rs:58:55\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0m                   Err(_) => character >= 'a' && character <= 'f',\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use: `('a'..='f').contains(&character)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\u001b[0m\n\n"}
{"message":"match expression looks like `matches!` macro","code":{"code":"clippy::match_like_matches_macro","explanation":null},"level":"warning","spans":[{"file_name":"src/day4_2020.rs","byte_start":3612,"byte_end":3805,"line_start":71,"line_end":74,"column_start":33,"column_end":34,"is_primary":true,"text":[{"text":"                                match a[1] {","highlight_start":33,"highlight_end":45},{"text":"                                    \"amb\" | \"blu\" | \"brn\" | \"gry\" | \"grn\" | \"hzl\" | \"oth\" => true,","highlight_start":1,"highlight_end":99},{"text":"                                    _ => false,","highlight_start":1,"highlight_end":48},{"text":"                                }","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::match_like_matches_macro)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try this","code":null,"level":"help","spans":[{"file_name":"src/day4_2020.rs","byte_start":3612,"byte_end":3805,"line_start":71,"line_end":74,"column_start":33,"column_end":34,"is_primary":true,"text":[{"text":"                                match a[1] {","highlight_start":33,"highlight_end":45},{"text":"                                    \"amb\" | \"blu\" | \"brn\" | \"gry\" | \"grn\" | \"hzl\" | \"oth\" => true,","highlight_start":1,"highlight_end":99},{"text":"                                    _ => false,","highlight_start":1,"highlight_end":48},{"text":"                                }","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":"matches!(a[1], \"amb\" | \"blu\" | \"brn\" | \"gry\" | \"grn\" | \"hzl\" | \"oth\")","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: match expression looks like `matches!` macro\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day4_2020.rs:71:33\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   match a[1] {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                       \"amb\" | \"blu\" | \"brn\" | \"gry\" | \"grn\" | \"hzl\" | \"oth\" => true,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                       _ => false,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try this: `matches!(a[1], \"amb\" | \"blu\" | \"brn\" | \"gry\" | \"grn\" | \"hzl\" | \"oth\")`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::match_like_matches_macro)]` on by default\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro\u001b[0m\n\n"}
{"message":"indexing into a vector may panic","code":{"code":"clippy::match_on_vec_items","explanation":null},"level":"warning","spans":[{"file_name":"src/day4_2020.rs","byte_start":3618,"byte_end":3622,"line_start":71,"line_end":71,"column_start":39,"column_end":43,"is_primary":true,"text":[{"text":"                                match a[1] {","highlight_start":39,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-W clippy::match-on-vec-items` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_on_vec_items","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try this","code":null,"level":"help","spans":[{"file_name":"src/day4_2020.rs","byte_start":3618,"byte_end":3622,"line_start":71,"line_end":71,"column_start":39,"column_end":43,"is_primary":true,"text":[{"text":"                                match a[1] {","highlight_start":39,"highlight_end":43}],"label":null,"suggested_replacement":"a.get(1)","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: indexing into a vector may panic\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day4_2020.rs:71:39\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0m                   match a[1] {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try this: `a.get(1)`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::match-on-vec-items` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_on_vec_items\u001b[0m\n\n"}
{"message":"redundant pattern matching, consider using `is_ok()`","code":{"code":"clippy::redundant_pattern_matching","explanation":null},"level":"warning","spans":[{"file_name":"src/day4_2020.rs","byte_start":4168,"byte_end":4374,"line_start":81,"line_end":84,"column_start":55,"column_end":42,"is_primary":true,"text":[{"text":"                                        let chorley = match character.to_string().parse::<i64>() {","highlight_start":55,"highlight_end":99},{"text":"                                            Ok(_) => true,","highlight_start":1,"highlight_end":59},{"text":"                                            Err(_) => false,","highlight_start":1,"highlight_end":61},{"text":"                                        };","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(clippy::redundant_pattern_matching)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pattern_matching","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"try this","code":null,"level":"help","spans":[{"file_name":"src/day4_2020.rs","byte_start":4168,"byte_end":4374,"line_start":81,"line_end":84,"column_start":55,"column_end":42,"is_primary":true,"text":[{"text":"                                        let chorley = match character.to_string().parse::<i64>() {","highlight_start":55,"highlight_end":99},{"text":"                                            Ok(_) => true,","highlight_start":1,"highlight_end":59},{"text":"                                            Err(_) => false,","highlight_start":1,"highlight_end":61},{"text":"                                        };","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":"character.to_string().parse::<i64>().is_ok()","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: redundant pattern matching, consider using `is_ok()`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day4_2020.rs:81:55\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m81\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   let chorley = match character.to_string().parse::<i64>() {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m_____________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                       Ok(_) => true,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m83\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                       Err(_) => false,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m84\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   };\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: try this: `character.to_string().parse::<i64>().is_ok()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::redundant_pattern_matching)]` on by default\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pattern_matching\u001b[0m\n\n"}
{"message":"implicitly cloning a `Mountain` by calling `to_owned` on its dereferenced type","code":{"code":"clippy::implicit_clone","explanation":null},"level":"warning","spans":[{"file_name":"src/day9.rs","byte_start":6423,"byte_end":6431,"line_start":178,"line_end":178,"column_start":58,"column_end":66,"is_primary":true,"text":[{"text":"                    contents[row_index][col_index] = val.to_owned();","highlight_start":58,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-W clippy::implicit-clone` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_clone","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider using","code":null,"level":"help","spans":[{"file_name":"src/day9.rs","byte_start":6423,"byte_end":6431,"line_start":178,"line_end":178,"column_start":58,"column_end":66,"is_primary":true,"text":[{"text":"                    contents[row_index][col_index] = val.to_owned();","highlight_start":58,"highlight_end":66}],"label":null,"suggested_replacement":"clone","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: implicitly cloning a `Mountain` by calling `to_owned` on its dereferenced type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day9.rs:178:58\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    contents[row_index][col_index] = val.to_owned();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider using: `clone`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::implicit-clone` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_clone\u001b[0m\n\n"}
{"message":"casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers","code":{"code":"clippy::cast_possible_truncation","explanation":null},"level":"warning","spans":[{"file_name":"src/day9.rs","byte_start":6532,"byte_end":6550,"line_start":180,"line_end":180,"column_start":37,"column_end":55,"is_primary":true,"text":[{"text":"                    sum_pointer_vec[taker_num as usize - 1] += 1;","highlight_start":37,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`-W clippy::cast-possible-truncation` implied by `-W clippy::pedantic`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day9.rs:180:37\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m180\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    sum_pointer_vec[taker_num as usize - 1] += 1;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `-W clippy::cast-possible-truncation` implied by `-W clippy::pedantic`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation\u001b[0m\n\n"}
{"message":"casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers","code":{"code":"clippy::cast_possible_truncation","explanation":null},"level":"warning","spans":[{"file_name":"src/day9.rs","byte_start":6981,"byte_end":6999,"line_start":189,"line_end":189,"column_start":45,"column_end":63,"is_primary":true,"text":[{"text":"                            sum_pointer_vec[top_basin as usize - 1];","highlight_start":45,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day9.rs:189:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m189\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| ...\u001b[0m\u001b[0m                   sum_pointer_vec[top_basin as usize - 1];\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation\u001b[0m\n\n"}
{"message":"casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers","code":{"code":"clippy::cast_possible_truncation","explanation":null},"level":"warning","spans":[{"file_name":"src/day9.rs","byte_start":6911,"byte_end":6928,"line_start":188,"line_end":188,"column_start":41,"column_end":58,"is_primary":true,"text":[{"text":"                        sum_pointer_vec[left_num as usize - 1] +=","highlight_start":41,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day9.rs:188:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m188\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        sum_pointer_vec[left_num as usize - 1] +=\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation\u001b[0m\n\n"}
{"message":"casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers","code":{"code":"clippy::cast_possible_truncation","explanation":null},"level":"warning","spans":[{"file_name":"src/day9.rs","byte_start":7247,"byte_end":7265,"line_start":194,"line_end":194,"column_start":41,"column_end":59,"is_primary":true,"text":[{"text":"                        sum_pointer_vec[top_basin as usize - 1] = 0;","highlight_start":41,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day9.rs:194:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m194\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        sum_pointer_vec[top_basin as usize - 1] = 0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation\u001b[0m\n\n"}
{"message":"casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers","code":{"code":"clippy::cast_possible_truncation","explanation":null},"level":"warning","spans":[{"file_name":"src/day9.rs","byte_start":7310,"byte_end":7328,"line_start":195,"line_end":195,"column_start":35,"column_end":53,"is_primary":true,"text":[{"text":"                        basin_vec[top_basin as usize - 1] = Rc::new(RefCell::new(0));","highlight_start":35,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day9.rs:195:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m195\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        basin_vec[top_basin as usize - 1] = Rc::new(RefCell::new(0));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation\u001b[0m\n\n"}
{"message":"casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers","code":{"code":"clippy::cast_possible_truncation","explanation":null},"level":"warning","spans":[{"file_name":"src/day9.rs","byte_start":7588,"byte_end":7620,"line_start":201,"line_end":201,"column_start":37,"column_end":69,"is_primary":true,"text":[{"text":"                    sum_pointer_vec[*val.basin_num.borrow() as usize - 1] += 1;","highlight_start":37,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/day9.rs:201:37\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m201\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    sum_pointer_vec[*val.basin_num.borrow() as usize - 1] += 1;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation\u001b[0m\n\n"}
{"message":"44 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 44 warnings emitted\u001b[0m\n\n"}
